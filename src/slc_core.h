/**************************************************************************************
 * 文件:    slc/core.h
 *
 * 说明:    SLC核心定义
 *
 * 作者:    Jun
 *
 * 时间:    2011-01-11
**************************************************************************************/
#ifndef SLC_CORE_H
#define SLC_CORE_H

/*------------------------------------------------------------------------------------
 * 
 *      分压机支持设定
 * 
**----------------------------------------------------------------------------------*/
#define SLC_K_MAX_NR  9     /* 可支持的最大裁刀数目, 推荐范围=[7, 16] */
#define SLC_L_MAX_NR  16    /* 可支持的最大压线数目, 推荐范围=[12,24] */

/*------------------------------------------------------------------------------------
 * 
 *      分压机压线资料
 * 
**----------------------------------------------------------------------------------*/
#define SLC_K_TOKEN  ('*')  /* 裁刀记号: 星号   */  
#define SLC_L_TOKEN  ('+')  /* 压线记号: 加号   */

#define SLC_DATA_LEN  512   /* 压线资料最大长度 */

/*------------------------------------------------------------------------------------
 * 
 *      分压机基本类型
 * 
**----------------------------------------------------------------------------------*/
#define SLC_TYPE_SINGLE    1    /* 单排型 */
#define SLC_TYPE_DOUBLE    2    /* 双排型 */


/*------------------------------------------------------------------------------------
 * 
 *      刀线位置信息结构
 * 
**----------------------------------------------------------------------------------*/
struct slc_location_s {
    int   k_location[SLC_K_MAX_NR];   /* 刀的定位位置       */
    int   k_selected[SLC_K_MAX_NR];   /* 刀的选中状态       */
    int   l_location[SLC_L_MAX_NR];   /* 线的定位位置       */
    int   l_selected[SLC_L_MAX_NR];   /* 线的选中状态       */
    int   fan_location;               /* 吸风口位置         */
    int   press_1_location;           /* 压深位置-1         */
    int   press_2_location;           /* 压深位置-2         */
    int   press_type;                 /* 压型               */
};

typedef struct slc_location_s slc_locate_t;


/*------------------------------------------------------------------------------------
 * 
 *      刀线定位值结构
 * 
**----------------------------------------------------------------------------------*/
struct slc_fix_value_s {
    int   k_fix_set[SLC_K_MAX_NR];    /* 刀的定位值         */
    int   l_fix_set[SLC_L_MAX_NR];    /* 线的定位值         */
    int   fan_fix_set;                /* 吸风定位值         */
    int   press_1_fix_set;            /* 压深定位值         */
    int   press_2_fix_set;            /* 压深定位值         */
    int   big_start_set;              /* 粗启动+/-值        */
    int   k_big_fix;                  /* 刀粗定位           */
    int   k_small_fix;                /* 刀细定位           */
    int   l_big_fix;                  /* 线粗定位           */
    int   l_small_fix;                /* 线细定位           */
    int   fan_big_fix;                /* 吸风粗定位         */
    int   fan_small_fix;              /* 吸风细定位         */
    int   press_big_fix;              /* 压深粗定位         */
    int   press_small_fix;            /* 压深细定位         */
};

typedef struct slc_fix_value_s slc_fix_value_t;

/*------------------------------------------------------------------------------------
 * 
 *      当前运行状态
 * 
**----------------------------------------------------------------------------------*/
struct slc_run_state_s {
    int   start;
    int   stop;
    int   fixed;
    int   k_down;
    int   l_down;
    int   regulate;
    int   order_chg;
    int   regressed;
    int   cim_is_link;
    int   cim_ord_chg;
};

/*------------------------------------------------------------------------------------
 * 
 *      刀线单位值结构(编码器的单位值)
 * 
**----------------------------------------------------------------------------------*/
struct slc_coder_unit_s {
    int   k_unit[SLC_K_MAX_NR];   /* 刀单位值 */
    int   l_unit[SLC_L_MAX_NR];   /* 线单位值 */
    int   fan_unit;               /* 吸风单位 */
    int   press_1_unit;           /* 压深单位 */
    int   press_2_unit;           /* 压深单位 */
};

/*------------------------------------------------------------------------------------
 * 
 *      刀线寸动补偿值
 * 
**----------------------------------------------------------------------------------*/
struct slc_compensate_s {
    int   k_compensate[SLC_K_MAX_NR];    /* 寸动刀补偿值 */
    int   l_compensate[SLC_L_MAX_NR];    /* 寸动线补偿值 */
};


/*------------------------------------------------------------------------------------
 * 
 *      换单之刀线控制设定
 * 
**----------------------------------------------------------------------------------*/
struct slc_kl_set_on_oc_s {
    int   k_down_m;               /* 下刀米数           */
    int   k_up_m;                 /* 上刀米数           */
    int   l_down_m;               /* 下线米数           */
    int   l_up_m;                 /* 上线米数           */
    int   l2_down_m;              /* 下线米数(双排线时) */
    int   l2_up_m;                /* 上线米数(双排线时) */
    int   k_up_delay;             /* 刀上延迟           */
    int   k_down_delay;           /* 刀下延迟           */
    int   l_up_delay;             /* 线上延迟           */
    int   l_down_delay;           /* 线下延迟           */
    int   l2_up_delay;            /* 线2上延迟          */
    int   l2_down_delay;          /* 线2下延迟          */
};


/*------------------------------------------------------------------------------------
 * 
 *      磨刀信息结构
 * 
**----------------------------------------------------------------------------------*/
struct slc_whet_s {
    int    whet_run[SLC_K_MAX_NR];  /* 运行米数(16位) */
    int    whet_set[SLC_K_MAX_NR];  /* 设定米数(16位) */
    int    whet_wht[SLC_K_MAX_NR];  /* 磨刀米数(16位) */
    INT32S whet_acc[SLC_K_MAX_NR];  /* 累计米数(32位) */
    int    oil_leng[SLC_K_MAX_NR];  /* 给油米数(16位) */
    int    oil_time[SLC_K_MAX_NR];  /* 给油时间(16位) */
};


/*------------------------------------------------------------------------------------
 * 
 *      其它数据
 * 
**----------------------------------------------------------------------------------*/
struct slc_misc_data_s {
    int   yx_big;
    int   yx_small;
    
};

/*------------------------------------------------------------------------------------
 * 
 *      订单的刀线信息结构(排单期间, 常常作为一个临时变量使用)
 * 
**----------------------------------------------------------------------------------*/
struct __order_kl_info {
    int   k_pos[SLC_K_MAX_NR];
    int   k_pos_nr;
    int   l_pos[SLC_L_MAX_NR]; 
    int   l_pos_nr;
    int   width; /* 总宽 */
};

typedef struct __order_kl_info order_kl_info_t;


/*------------------------------------------------------------------------------------
 * 
 *      分压机描述符(其中米数的单位为: 0.1mm)
 * 
**----------------------------------------------------------------------------------*/
struct slc_descriptor_s {
    char   * name;                      /* 分压机名称         */
    char   * oem;                       /* 分压机厂商         */
    char   * comment;                   /* 分压机说明         */
    int    slc_type;                    /* 分压机类型         */
    INT16U slc_flag;                    /* 分压机全局选项     */
    INT16U slc_state;                   /* 分压机当前状态     */
    int    k_number;                    /* 裁刀数目           */
    int    l_number;                    /* 压线数目           */
    int    hw_width;                    /* 机械幅宽           */
    int    max_left_offs;               /* 向左最大偏移度     */
    int    max_right_offs;              /* 向右最大偏移度     */
    int    hw_offset;                   /* 机台横移           */
    int    slc_speed;                   /* 分压机当前速度     */
    int    slc_spg;                     /* 速度单位(编码器)   */
    int    speed_scale;                 /* 上位机的车速比率   */
    int    k_disable[SLC_K_MAX_NR];     /* 刀的不可用状态     */
    int    k_lmt_left[SLC_K_MAX_NR];    /* 刀的左限位         */
    int    k_lmt_right[SLC_K_MAX_NR];   /* 刀的右限位         */
    int    k_distance[SLC_K_MAX_NR];    /* 刀间距离           */
    int    l_disable[SLC_L_MAX_NR];     /* 线的不可用状态     */
    int    l_lmt_left[SLC_L_MAX_NR];    /* 线的左限位         */
    int    l_lmt_right[SLC_L_MAX_NR];   /* 线的右限位         */
    int    l_distance[SLC_L_MAX_NR];    /* 线间距离           */
    struct slc_compensate_s compensate; /* 补偿设定           */
    struct slc_coder_unit_s unit;       /* 单位值             */
    struct slc_kl_set_on_oc_s kl_ctrl;  /* 刀线上下米数(mm)   */
    struct slc_whet_s k_whet;           /* 磨刀控制           */
    struct slc_location_s kl_set;       /* 刀线设定值         */
    struct slc_location_s kl_act;       /* 当前实际值         */
    struct slc_location_s kl_adjust;    /* 校正值             */
    struct slc_run_state_s state;       /* 当前运行状态       */
    struct slc_fix_value_s fix_set;     /* 定位值设定值       */
    struct slc_misc_data_s misc;        /* 其它数据           */
    struct slc_location_s kl_standard;  /* 刀线标准位置       */
    struct slc_location_s kl_regress;   /* 刀线归零位置       */
    #if 1
    order_struct working;               /* 本机的当前定单     */
    #endif
    order_kl_info_t order_kl;           /* 订单的刀线信息结构 */
    void * private_data;                /* 某分压机的特有数据 */
};

typedef struct slc_descriptor_s slc_descriptor_t;

/*------------------------------------------------------------------------------------
 *
 *          分压机(SLC)默认参数
 *
**----------------------------------------------------------------------------------*/
#ifdef SLC_CORE_C
static slc_descriptor_t __default_slc = {
/*lint --e{785}*/
    "分压机控制系统",                   /* 分压机名称         */
    "",                                 /* 分压机厂商         */
    "",                                 /* 分压机说明         */
    SLC_TYPE_SINGLE,                    /* 分压机类型         */
    0,                                  /* 分压机全局选项     */
    0,                                  /* 分压机当前状态     */
    5,                                  /* 裁刀数目           */
    8,                                  /* 压线数目           */
    22000,                              /* 机械幅宽           */
    -100,                               /* 向左最大偏移度     */
    100,                                /* 向右最大偏移度     */
    0,                                  /* 机台横移           */
    0,                                  /* 分压机当前速度     */
    300,                                /* 速度单位(编码器)   */
    10,                                 /* 上位机车速比率     */
    {0,},                               /* 刀的不可用状态     */
    {                                   /* 刀的左限位...      */
        -11000,  -11000, -11000,        /* ...1,2,3 */
        -11000,                         /* ...中刀4 */
        -11000,  -11000, -11000,        /* ...5,6,7 */
    },
    {                                   /* 刀的右限位...      */
        11000,  11000,  11000,          /* ...1,2,3 */
        11000,                          /* ...中刀4 */
        11000,  11000,  11000,          /* ...5,6,7 */
    },
    {                                   /* 刀间距离...        */
        1500, 1500, 1500, 1500, 1500, 1500,   
    },
    {0,},                               /* 线的不可用状态     */
    {                                   /* 线的左限位...      */
        -11000, -11000, -11000, -11000, /* ...1,2,3,4    */
        -11000, -11000, -11000, -11000, /* ...5,6,7,8    */
        -11000, -11000, -11000, -11000, /* ...9,10,11,12 */
    },
    {                                   /* 线的右限位...      */
        11000, 11000, 11000, 11000,     /* ...1,2,3,4    */
        11000, 11000, 11000, 11000,     /* ...4,5,6,7    */
        11000, 11000, 11000, 11000,     /* ...9,10,11,12 */
    },
    {                                   /* 线间距离           */
        1500, 1500, 1500, 1500,         /* 1-2, 2-3, 3-4, 4-5 */
        1500, 1500, 1500, 1500,         /* 5-6, 6-7, ......   */
        1500, 1500, 1500,               /* 9-10, ..., 11-12   */
    },
    {{0,},{0,}},                        /* 补偿设定           */
    {                                   /* 单位值...          */
        {                               /* ...刀单位值 */
            120, 120, 120, 120,
            120, 120, 120,                
        },
        {                               /* ...线单位值 */
            120, 120, 120, 120,
            120, 120, 120, 120,
            120, 120, 120, 120,
        },
        120,                            /* ...吸风单位 */
        120,                            /* ...压深单位 */
        120                             /* ...压深单位 */
    },
    {                                   /* 刀线上下米数(mm)...*/
        6000,                           /* ...下刀米数       */
        6000,                           /* ...上刀米数       */
        6000,                           /* ...下线米数       */
        6000,                           /* ...上线米数       */
        6000,                           /* ...下线米数(双排) */
        6000,                           /* ...上线米数(双排) */
        6000,                           /* ...刀上延迟       */
        6000,                           /* ...刀下延迟       */
        6000,                           /* ...线上延迟       */
        6000,                           /* ...线下延迟       */
        6000,                           /* ...线2上延迟      */
        6000                            /* ...线2下延迟      */
    },    
    {                                   /* 磨刀控制           */
        {0,}, 
        {0,},
        {0,}, 
        {0L,},
        {0,},
        {0,}
    },
    {                                   /* 刀线设定值         */
        {0,}, 
        {0,},
        {0,}, 
        {0,},
        0,
    },
    {                                   /* 当前实际值         */
        {-12000, -8000, -4000, 0, 4000, 8000, 12000}, 
        {0,},
        {-11000, -9000, -7000, -5000, -3000, -1000, 1000, 3000, 5000, 7000, 9000, 11000}, 
        {0,},
        0,
    },
    {                                   /* 校正值             */
        {0,}, 
        {0,},
        {0,}, 
        {0,},
        0,
    },
    {                                   /* 当前运行状态       */
        0,
    },
    {                                   /* 定位值设定值       */
        {0,}, {0,}, 0,                  /* FIX: 不应设为0 */
    },
    {0,},                               /* 其它数据           */
    {                                   /* 刀线标准位置       */
        {0,}, {0,},
        {0,}, {0,},
        0,
    },
    {                                   /* 刀线归零位置       */
        {0,}, {0,},
        {0,}, {0,},
        0,
    },
    #if 1
    INIT_order_struct,                  /* 本机的当前定单     */
    #endif
    {{0,},0,{0,},0,0},                  /* 订单的刀线信息结构 */
    NULL                                /* 某分压机的特有数据 */
};
#endif

/*------------------------------------------------------------------------------------
 * 
 *      错误码
 * 
**----------------------------------------------------------------------------------*/
#define SLC_ERR_NONE          0x00000000uL   /* 无错误       */
#define SLC_ERR_INVALID       0x00010000uL   /* 参数无效     */
#define SLC_ERR_INVALID_TYPE  0x00020000uL   /* 类型无效     */
#define SLC_ERR_INVALID_SETUP 0x00030000uL   /* 无效的设定   */
#define SLC_ERR_HW_WIDTH      0x00040000uL   /* 超出机台幅宽 */
#define SLC_ERR_NO_KL         0x00050000uL   /* 刀线不够用   */
#define SLC_ERR_K_LIMIT       0x00060000uL   /* 刀机械限位   */
#define SLC_ERR_L_LIMIT       0x00070000uL   /* 线机械限位   */
#define SLC_ERR_KK_LMT        0x00080000uL   /* 刀刀限位     */
#define SLC_ERR_LL_LMT        0x00090000uL   /* 线线限位     */
#define SLC_ERR_K_DISABLED    0x000A0000uL   /* 某刀不可选   */
#define SLC_ERR_L_DISABLED    0x000B0000uL   /* 某线不可选   */
#define SLC_ERR_DATA          0x000C0000uL   /* 压线资料有误 */


/*------------------------------------------------------------------------------------
 * 
 *      排单选项
 * 
**----------------------------------------------------------------------------------*/
#define SLC_FLAG_TRIM  0x0001   /* 修边               */ 
#define SLC_FLAG_PREP  0x0002   /* 预压(仅双排线有效) */
#define SLC_FLAG_ASTD  0x0004   /* 自动标准位置       */
#define SLC_FLAG_RVSE  0x0100   /* 刀线反排模式       */

/*------------------------------------------------------------------------------------
 * 
 *      通用例程声明
 * 
**----------------------------------------------------------------------------------*/
INT32U  slc_locate(slc_descriptor_t * slc, char data[], INT16U flag);
int     init_orderkl(slc_descriptor_t * slc, char data[], 
                     int  **k_data, int *k_data_nr, 
                     int  **l_data, int *l_data_nr,
                     INT16U flag);
BOOL    slc_initialize(void);
BOOL    slc_setup_to_default(slc_descriptor_t * slc);
INT32U  slc_check_setup(slc_descriptor_t * slc, INT16U flag);

char *  slc_error_message(INT32U err_code);



#endif /* SLC_CORE_H */
/*=====================================================================================
 * 
 * 本文件结束: slc/core.h
 * 
**===================================================================================*/


